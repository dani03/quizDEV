name: CI/CD Workflow

env:
  JMETER_DOWNLOAD_URL: "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz"

on:
  push:
    branches:
      - Quentin
      
jobs:
  build_and_push_image:
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
  
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
  
      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build
  
      - name: Tag and Push Docker images
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          docker tag artisan ghcr.io/${GITHUB_REPOSITORY_OWNER}/artisan:latest
          docker push ghcr.io/${GITHUB_REPOSITORY_OWNER}/artisan:latest
          
          docker tag php ghcr.io/${GITHUB_REPOSITORY_OWNER}/php:latest
          docker push ghcr.io/${GITHUB_REPOSITORY_OWNER}/php:latest
          
          docker tag nginx ghcr.io/${GITHUB_REPOSITORY_OWNER}/nginx:latest
          docker push ghcr.io/${GITHUB_REPOSITORY_OWNER}/nginx:latest
  
  performance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Downloading Apache JMeter
        run: wget -qO- $JMETER_DOWNLOAD_URL | tar xvz -C /tmp
      
      - name: Running JMeter performance tests
        run: /tmp/apache-jmeter-5.4.1/bin/jmeter -n -t jmeter-scripts/performance-test.jmx -l results.jtl

      - name: Upload JMeter results
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results
          path: results.jtl

  php_tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, pdo_sqlite

    - name: Copy .env
      run: php -r "file_exists('src/.env') || copy('src/.env.example', 'src/.env');"

    - name: Update Dependencies
      run: composer update --working-dir=src

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --working-dir=src

    - name: Directory Permissions
      run: chmod -R 777 src/storage src/bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p src/database
        touch src/database/database.sqlite

    - name: Execute PHPUnit Tests
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: src/database/database.sqlite
      run: src/vendor/bin/phpunit

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Scan with Snyk
      run: npx snyk test --all-projects
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
